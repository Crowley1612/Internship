<template>
  <!-- Your existing template code -->
</template>

<script>
import axios from 'axios';
import Sidebar from '../layout/Sidebar.vue';
import Header from '../layout/Header.vue';
import Navbar from '../Processing.vue';
import { ref, computed, onMounted } from 'vue';

export default {
  name: 'AddPerson',
  components: {
    Header,
    Sidebar,
    Navbar
  },
  data() {
    return {
      signers: [
        { name: '', email: '', method: 'Ký số' },
        { name: '', email: '', method: 'Ký số' }
      ],
      recipients: [{ name: '', email: '', method: 'Nhận bản sao' }],
      signerErrors: [{}, {}],
      recipientErrors: [{}],
      contacts: [],
      searchQuery: '',
      entryType: '',
      showModal: false,
      autoCloseTimeout: null,
      showErrors: false, 
    };
  },
  computed: {
    filteredContacts() {
      const query = this.searchQuery.toLowerCase();
      return this.contacts.filter(contact =>
        contact.name.toLowerCase().includes(query) || contact.email.toLowerCase().includes(query)
      );
    }
  },
  created() {
    this.loadContacts();
    this.loadFromLocalStorage(); // Call loadFromLocalStorage to initialize state
  },
  methods: {
    openModal() {
      this.showModal = true;
      this.autoCloseModal();
    },

    closeModal() {
      this.showModal = false;
      if (this.autoCloseTimeout) {
        clearTimeout(this.autoCloseTimeout);
      }
    },
    autoCloseModal() {
      this.autoCloseTimeout = setTimeout(() => {
        this.closeModal();
      }, 5000); // Automatically close the modal after 5 seconds
    },
    loadContacts() {
      axios.get('/src/data/contacts.json')
        .then(response => {
          this.contacts = response.data;
        })
        .catch(error => {
          console.error('Error loading contacts:', error);
        });
    },
    loadFromLocalStorage() {
      const data = localStorage.getItem('formData');
      if (data) {
        const parsedData = JSON.parse(data);
        if (parsedData.signers) {
          this.signers = parsedData.signers;
          this.signerErrors = this.signers.map(() => ({}));
        }
        if (parsedData.recipients) {
          this.recipients = parsedData.recipients;
          this.recipientErrors = this.recipients.map(() => ({}));
        }
      }
    },
    addEntry(type) {
      const entry = { name: '', email: '', method: type === 'signer' ? 'Ký số' : 'Nhận bản sao' };
      if (type === 'signer') {
        this.signers.push(entry);
        this.signerErrors.push({});
      } else if (type === 'recipient') {
        this.recipients.push(entry);
        this.recipientErrors.push({});
      }
      this.validateForm();
    },
    confirmRemoveSigner(index, type) {
      if (confirm('Bạn có chắc chắn muốn xóa người này không?')) {
        if (type === 'signer') {
          this.signers.splice(index, 1);
          this.signerErrors.splice(index, 1);
        } else if (type === 'recipient') {
          this.recipients.splice(index, 1);
          this.recipientErrors.splice(index, 1);
        }
        this.saveToLocalStorage();
      }
    },
    selectContact(contact) {
      if (this.entryType === 'signer') {
        const emptySigner = this.signers.find(signer => !signer.name && !signer.email);
        if (emptySigner) {
          emptySigner.name = contact.name;
          emptySigner.email = contact.email;
        } else {
          this.signers.push({
            name: contact.name,
            email: contact.email,
            method: 'Ký số'
          });
          this.signerErrors.push({});
        }
      } else if (this.entryType === 'recipient') {
        const emptyRecipient = this.recipients.find(recipient => !recipient.name && !recipient.email);
        if (emptyRecipient) {
          emptyRecipient.name = contact.name;
          emptyRecipient.email = contact.email;
        } else {
          this.recipients.push({
            name: contact.name,
            email: contact.email,
            method: 'Nhận bản sao'
          });
          this.recipientErrors.push({});
        }
      }
      // Đóng modal sau khi chọn người
      this.$nextTick(() => {
        const modalElement = document.getElementById('contactModal');
        if (modalElement) {
          const modal = bootstrap.Modal.getInstance(modalElement);
          if (modal) {
            modal.hide();
          }
        }
      });
    },

    setEntryType(type) {
      this.entryType = type;
    },

    validateForm() {
      const validateEntries = (entries, errors) => {
        return entries.every((entry, index) => {
          let isValid = true;
          
          // Check if the name field is empty and set an error if so
          if (!entry.name) {
            errors[index].name = true;
            isValid = false;
          } else {
            errors[index].name = false;
          }

          // Check if the email is valid and set an error if not
          if (!entry.email || !this.isValidEmail(entry.email)) {
            errors[index].email = true;
            isValid = false;
          } else {
            errors[index].email = false;
          }
          
          return isValid;
        });
      };

      // Validate both signers and recipients
      const signersValid = validateEntries(this.signers, this.signerErrors);
      const recipientsValid = validateEntries(this.recipients, this.recipientErrors);

      return signersValid && recipientsValid;
    },

    validateEmailField(value, index, type) {
      // Check if the email is valid
      const isValid = value.length > 0 ? this.isValidEmail(value) : true;
      
      // Determine the type (signer or recipient) and update the error status accordingly
      if (type === 'signer') {
        this.signerErrors[index].email = !isValid;
      } else if (type === 'recipient') {
        this.recipientErrors[index].email = !isValid;
      }
      
      // If there's any input, remove the error
      if (value.length > 0) {
        if (type === 'signer') {
          this.signerErrors[index].email = false;
        } else if (type === 'recipient') {
          this.recipientErrors[index].email = false;
        }
      }

      this.saveToLocalStorage(); // Save the current state to local storage
    },

    clearNameError(value, index, type) {
      // If there's any input, remove the name error
      if (value.length > 0) {
        if (type === 'signer') {
          this.signerErrors[index].name = false;
        } else if (type === 'recipient') {
          this.recipientErrors[index].name = false;
        }
      }

      this.saveToLocalStorage(); // Save the current state to local storage
    },

    saveToLocalStorage() {
      const data = {
        signers: this.signers,
        recipients: this.recipients
      };
      localStorage.setItem('formData', JSON.stringify(data));
      console.log('Dữ liệu đã lưu:', JSON.stringify(data, null, 2));
    },

    isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    },
    handleBack() {
      this.$router.push('/Chinh-sua-van-ban');
    },
    handleNext() {
      this.showErrors = true; // Show errors if any
      this.validateForm();
      if (this.signers.every(signer => signer.name && signer.email)) {
        this.$router.push('/Thiet-lap-vung-ky');
      }
    }
  }
};
</script>

<style scoped>
@import '@/assets/AddPerson.css';
</style>
